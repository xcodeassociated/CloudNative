version: '2.4'
services:
    configuration-service:
        image: configuration-service
        build:
            context: ./configuration-service
            dockerfile: Dockerfile
        healthcheck:
            test: ["CMD", "curl", "-f","http://localhost:8888/actuator/health"]
            interval: 10s
            timeout: 10s
            retries: 5
        restart: on-failure
        networks:
            - int-dev-net
        expose:
            - "8888"
        ports:
            - "8888:8888"

    eureka-service:
        image: eureka-service
        depends_on:
            configuration-service:
                condition: service_healthy
        links:
            - "configuration-service:configuration-service"
        networks:
            - int-dev-net
        build:
            context: ./eureka-service
            dockerfile: Dockerfile
        healthcheck:
            test: ["CMD", "curl", "-f","http://localhost:8761/actuator/health"]
            interval: 10s
            timeout: 10s
            retries: 5
        restart: on-failure
        expose:
            - "8761"
            - "8888"
        ports:
            - "8761:8761"

    zuul-service:
        image: zuul-service
        depends_on:
            configuration-service:
                condition: service_healthy
            eureka-service:
                condition: service_healthy
        links:
            - "configuration-service:configuration-service"
            - "eureka-service:eureka-service"
        networks:
            - int-dev-net
        build:
            context: ./zuul-service
            dockerfile: Dockerfile
        healthcheck:
            test: ["CMD", "curl", "-f","http://localhost:8090/actuator/health"]
            interval: 10s
            timeout: 10s
            retries: 5
        restart: on-failure
        expose:
            - "8761"
            - "8888"
            - "8090"
        ports:
            - "8090:8090"

    postgres:
        image: postgres:latest
        container_name: "postgres"
        environment:
            - POSTGRES_USER=postgres
            - POSTGRES_PASSWORD=password
        networks:
            - int-dev-net
        ports:
            - "5432:5432"
        volumes:
            - ./postgres-data:/var/lib/postgresql/data
            - ./init.sql:/docker-entrypoint-initdb.d/init.sql
        restart: on-failure

    grafana:
        image: grafana/grafana:6.2.2
        ports:
            - "4000:3000"
        networks:
            - int-dev-net
        links:
          - "influxdb:influxdb"
        volumes:
            - ./grafana/influxdb.yaml:/etc/grafana/provisioning/datasources/influxdb.yaml
            - ./grafana/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
            - ./grafana/UserServiceDashboard.json:/var/lib/grafana/dashboards/UserService.json
            - ./grafana/EventServiceDashboard.json:/var/lib/grafana/dashboards/EventService.json
            - ./grafana/GatewayServiceDashboard.json:/var/lib/grafana/dashboards/GatewayService.json
        environment:
            GF_SECURITY_ADMIN_PASSWORD: admin
        depends_on:
            influxdb:
              condition: service_started
        restart: on-failure

    influxdb:
        image: influxdb:1.7.6
        ports:
            - "8086:8086"
        networks:
            - int-dev-net
        volumes:
            - ./influx_init.iql:/docker-entrypoint-initdb.d/influx_init.iql/
            - ./infux-data:/var/lib/influxdb
        environment:
            INFLUXDB_HTTP_AUTH_ENABLED: "true"
            INFLUXDB_ADMIN_USER: admin
            INFLUXDB_ADMIN_PASSWORD: secret
        restart: on-failure

networks:
    int-dev-net:
        driver: bridge
